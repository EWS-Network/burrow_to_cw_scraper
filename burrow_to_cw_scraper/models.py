# generated by datamodel-codegen:
#   filename:  scraper_config.spec.json
#   timestamp: 2021-07-03T18:17:28+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import AnyUrl, BaseModel, Field


class ConsumerGroup(BaseModel):
    name: str


class MetricsDef(Enum):
    consumer_lag = 'consumer-lag'
    status = 'status'


class IamOverride(BaseModel):
    role_arn: Optional[str] = Field(None, alias='RoleArn', regex='^arn:aws(?:-[a-z]+)?:iam::[0-9]{12}:role/[\\S]+$')
    session_name: Optional[str] = Field(
        'metrics@BurrowToAWSCloudWatch',
        alias='SessionName',
        description='The name of the IAM session used for AssumeRole',
    )
    region_name: Optional[str] = Field(None, alias='RegionName')


class CloudwatchConfig(BaseModel):
    namespace: Optional[str] = Field('Kafka', alias='Namespace', description='The Cloudwatch Namespace for metrics')
    metrics: Optional[List[MetricsDef]] = Field(['consumer-lag'], alias='Metrics')
    interval: Optional[int] = Field(60, alias='Interval')
    iam: Optional[IamOverride] = None


class ClusterDef(BaseModel):
    name: Optional[str] = None
    groups: Optional[List[ConsumerGroup]] = Field(
        None, description='List of consumer groups to scan for and report metrics'
    )
    groups_regex: Optional[str] = Field(None, description='A regular expression to identify consumer groups with')
    groups_blacklist: Optional[List[ConsumerGroup]] = Field(None, description='List of consumer group names to ignore')
    groups_blacklist_regex: Optional[str] = Field(
        None, description='Regular expression of consumer groups to ignore. Takes precedence over groups_regex'
    )
    cloudwatch: Optional[CloudwatchConfig] = None


class Config(BaseModel):
    url: AnyUrl
    clusters: List[ClusterDef]
    cloudwatch: Optional[CloudwatchConfig] = None
